#!/usr/bin/env bash
set -eu -o pipefail

# Get name of this script without the "git-" prefix
NAME=$(basename "$0")
NAME=${NAME:4}

main_help="\
git $NAME <options> <command> <arguments>

Import other repositories into your git repository.
This is a simpler alternative to git subtree, submodule, stree, and subrepo.

Commits to an imported repo are kept within your project repo until you push
them to the imported repo. Local changes are maintained as a clean, rebased
set of patches for upstream contribution.

Commands:

  import    Import a remote repository into a local subdirectory
  export    Export a subdirectory into a remote repository
  build     Builds subrepo
  load      Loads current working dir from subrepo into parent repository
  list      List imported repositories

  help      Documentation for specific command

Options:
--
h,help      Show help

d,debug     Show the actual commands used
"
main_min_args=1

init_script() {
  ORIG_PWD="$(pwd)"
  ROOT="$(get-root)"
  cd "$ROOT"
}

import_help="\
git $NAME import <directory> <repository> [revision]

Import repository into directory.

By default, imports master branch. You can optionally choose a specific
revision/tag or branch.

Subsequent pulls will fetch from that revision/branch, by default.
--
"
import_min_args=2
import_max_args=3
import() {
  local subdir="$1"
  local remote="$2"
  local revision="${3:-master}"

  [ -e "$subdir" ] &&
    die "Directory '$subdir' already exists. Please remove it first."

  _build "$subdir" "$remote" "$revision"
  load "$subdir" "$remote" "$revision"
}

export_help="\
git $NAME export <directory> <repository> [branch]

Export directory into a repository.

By default, exports as master branch. You can optionally choose a different
branch name.
--
"
export_min_args=2
export_max_args=3
export() {
  local subdir="$1"
  local remote="$2"
  local revision="${3:-master}"

  [ ! -e "$subdir" ] &&
    die "Directory '$subdir' doesn't exist"

  # TODO: just save config? which remote revision do we use?
  # remote revision is $revision of $tmp_repo
  local datadir="$ROOT/$subdir/.subrepo"
  local cfg="$datadir/config"
  [ -e "$datadir" ] &&
    die "Directory '$subdir' is already a subrepo"

  _build "$subdir" "$remote" "$revision"

  local tmp_repo="$ROOT/.git/.subrepo/$subdir"
  cd "$tmp_repo"
  git push -u origin "$revision"

  cd "$ROOT"
  load "$subdir" "$remote" "$revision"
}

list_help="\
git $NAME list

List imported repositories.
--
"
list_max_args=0
list() {
  local paths
  paths=($(
    find . -name '.subrepo' |
      grep -v '/.git/' |
      grep '/.subrepo$' |
      sed 's/\/.subrepo$//' |
      sed 's/^.\///' |
      sort
  ))
  local path
  for path in "${paths[@]}"; do
    echo "$path"
  done
}

build_help="\
git $NAME build <directory>

Builds given sub-repository into .git/.subrepo/<directory>.
--
"
build_min_args=1
build_max_args=3
build() {
  local subdir="$1"
  local remote="${2:-}"
  local revision="${3:-}"

  [ ! -e "$subdir" ] &&
    die "Directory '$subdir' doesn't exist"

  local datadir="$ROOT/$subdir/.subrepo"
  [ ! -e "$datadir" ] &&
    die "Directory '$subdir' is not a subrepo"

  _build "$subdir" "$remote" "$revision"

  local tmp_repo="$ROOT/.git/.subrepo/$subdir"
  echo
  echo "Now you can work with the subrepo at: .git/.subrepo/$subdir"
  echo "cd .git/.subrepo/$subdir"
  echo "git pull --rebase"
  echo "git push"
}

_build() {
  # Actually builds subrepo.

  # Args:
  # * subdir
  # * remote repo URL
  # * revision (remote branch/tag/revision)

  # Workaround for Windows paths sometimes starting with
  # "/c/..." instead of "C:/..."
  [ "$ORIG_PWD" != "$ROOT" ] && [ "$ORIG_PWD" != "$(cd "$ROOT" && pwd)" ] &&
    die "You must run this command from your repo root folder."

  # Replace \ with / in case we're on Windows
  local subdir="${1//\\//}"
  # Strip trailing slashes
  subdir="${subdir%/}"

  local datadir="$ROOT/$subdir/.subrepo"
  local cfg="$datadir/config"
  local patch="$datadir/patch"
  local remotepath="${2:-$(git config --file="$cfg" subrepo.remote)}"
  local revision="${3:-$(git config --file="$cfg" subrepo.revision)}"
  local remote="$(cd "$remotepath" &> /dev/null && pwd || echo "$remotepath")"
  local branch="$revision"

  [ ! -e "$cfg" ] && [ "$CMD" != "import" ] && [ "$CMD" != "export" ] &&
    die "'$subdir' has no config"

  echo "Create local clone"
  local orig_rev="$(git rev-parse HEAD 2> /dev/null)"
  [ "$orig_rev" = "HEAD" ] &&
    orig_rev="null"
  local orig_branch="$(get-branch 2> /dev/null)"
  local tmp_repo="$ROOT/.git/.subrepo/$subdir"
  mkdir -p "$(dirname "$tmp_repo")"
  [ ! -e "$tmp_repo" ] &&
    git clone --shared -o parent "$ROOT" "$tmp_repo"
  cd "$tmp_repo"

  # Detach and remove project branch so we don't have a conflict with $branch
  [ "$orig_rev" != "null" ] && {
    # Repository is not empty
    git checkout -q "$orig_rev"
    ! git branch -q -f -d "$orig_branch" 2> /dev/null
  }
  ! git branch -q -f -d "$branch" 2> /dev/null

  # Add remote tracking branch
  git remote add origin "$remote" 2> /dev/null ||
    git remote set-url origin "$remote"
  local fetch_head=
  if [ "$CMD" != "export" ]; then
    git fetch -q origin "$revision"
    fetch_head="$(git rev-parse FETCH_HEAD)"
    # Don't switch to branch, yet. We'll import current revision's changes below.
    git branch -q "$branch" "$fetch_head"
    git branch -q -u "origin/$branch" "$branch"
  fi

  # If $subdir exists we import its changes into $branch
  if [ -e "$subdir" ]; then
    local remoterev="$(git config --file="$cfg" subrepo.remoterev)"
    [ "$CMD" != "export" ] &&
      git branch -f -q "$branch" "$remoterev"

    [ -e "$patch" ] && [ -s "$patch" ] && {
      echo "Apply known patches"
      git checkout -f -q "$remoterev"
      git clean -f -d -q
      git am "$patch"
      git branch -f -q "$branch" HEAD
      git checkout -f -q "$orig_rev"
      git clean -f -d -q
    }

    echo "Import new changes"
    git filter-branch -f --prune-empty \
        --subdirectory-filter "$subdir" \
        --index-filter 'git rm -r --ignore-unmatch --cached .subrepo' \
        -- HEAD

    if [ "$CMD" = "export" ]; then
      git branch -f -q "$branch" HEAD
    else
      mergebase HEAD "$branch" ||
        die "No common base found. You have to fix this by hand."

      if { [ -z "$first_on_source" ] || [ -z "$first_on_target" ]; } && [ "$new_parent" != "$(git rev-parse HEAD)" ]; then
        echo "Rebase local commits"
        git rebase --onto "$old_parent" "$new_parent" HEAD
        git branch -f -q "$branch" HEAD
      fi
    fi
  fi

  git checkout -f -q "$branch"
  git clean -f -d -q

  echo "Done"
}

load_help="\
git $NAME load <directory>

Loads committed branch state from .git/.subrepo/<directory> into parent repo.
--
"
load_min_args=1
load_max_args=3
load() {
  # Loads subrepo into project.

  # Args:
  # * subdir
  # * remote repo URL
  # * revision (remote branch/tag/revision)

  # Workaround for Windows paths sometimes starting with
  # "/c/..." instead of "C:/..."
  [ "$ORIG_PWD" != "$ROOT" ] && [ "$ORIG_PWD" != "$(cd "$ROOT" && pwd)" ] &&
    die "You must run this command from your repo root folder."

  # Replace \ with / in case we're on Windows
  local subdir="${1//\\//}"
  # Strip trailing slashes
  subdir="${subdir%/}"

  local datadir="$ROOT/$subdir/.subrepo"
  local cfg="$datadir/config"
  local patch="$datadir/patch"
  local remotepath="${2:-$(git config --file="$cfg" subrepo.remote)}"
  local revision="${3:-$(git config --file="$cfg" subrepo.revision)}"
  local branch="$revision"

  local hasconfig=
  [ -e "$cfg" ] &&
    hasconfig=true

  [ "$(git diff --cached --name-only)" ] &&
    die "You have staged changes. Either stash or commit them first."

  [ -e "$subdir" ] && {
    [ "$(git status --short -- "$subdir")" ] &&
      die "You have uncommited changes in '$subdir'"
    [ ! -e "$cfg" ] && [ "$CMD" != "import" ] && [ "$CMD" != "export" ] &&
      die "'$subdir' has no config"
  }

  local tmp_repo="$ROOT/.git/.subrepo/$subdir"
  cd "$tmp_repo"
  git fetch -q origin "$revision"
  mergebase "origin/$branch" "$branch" ||
    die "No common base found. You have to fix this by hand."
  local remoterev="$old_parent"

  # Import changes into project
  echo "Import into '$subdir'"
  cd "$ROOT"
  git fetch -q "$tmp_repo" "$branch"
  rm -rf "$subdir"
  git add -A "$subdir" &> /dev/null || true
  git read-tree -u --prefix "$subdir" FETCH_HEAD
  mkdir -p "$datadir"
  cd "$tmp_repo"
  git format-patch -k --stdout --binary "$remoterev..$branch" | converteol > "$patch"
  [ ! -s "$patch" ] &&
    rm -f "$patch"
  cd "$ROOT"
  git config --file="$cfg" subrepo.remote "$remotepath"
  git config --file="$cfg" subrepo.revision "$revision"
  # Write the parent revision if we have one
  git config --file="$cfg" subrepo.remoterev "$remoterev"

  # Commit changes
  git add -A "$subdir"
  [ "$(git status --short -- "$subdir")" ] || {
    echo "Nothing changed"
    return
  }
  local msg="Imported $subdir from $remotepath"
  [ "$hasconfig" ] &&
    msg="Updated $subdir from $remotepath"
  [ "$CMD" = "export" ] &&
    msg="Exported $subdir to $remotepath"
  git commit -m "$msg"

  echo "Done"
}

mergebase_help="\
git $NAME mergebase source target
--
"
mergebase_min_args=2
mergebase_max_args=3
mergebase() {
  local merge_base_order=()
  local counter=0
  # If you only want to list all possible ancestors
  local list_all="${3:-false}"
  local source="source"
  local target="target"

  prepare-merge-base "$source" "$1" true
  local first_commit_on_source="$branch_first_commit"
  prepare-merge-base "$target" "$2" false
  local first_commit_on_target="$branch_first_commit"

  for entry in ${merge_base_order[@]}; do
    local source_key="${source}_$entry"
    local source_value="${!source_key}"
    if [[ ${#source_value} -gt 40 ]]; then
      if $list_all; then
        echo "Multiple on $1: $source_value"
      fi
    else
      local target_key="${target}_$entry"
      if [ -z ${!target_key+x} ]; then
        # We didn't find it on the target side
        :
      else
        local target_value=${!target_key};
        if [[ ${#target_value} -gt 40 ]]; then
          if $list_all; then
            echo "Multiple on $2: $target_value"
          fi
        else
          echo "Found ancestor: ${!source_key},${!target_key}"
          echo "Steps from HEAD: $counter"
          new_parent="${!source_key}"
          old_parent="${!target_key}"
          if [[ $new_parent == $first_commit_on_source ]]; then
            first_on_source="HEAD"
          else
            first_on_source=""
          fi
          if [[ $old_parent == $first_commit_on_target ]]; then
            first_on_target="HEAD"
          else
            first_on_target=""
          fi

          if $list_all; then
            echo "Valid: $new_parent = $old_parent"
          else
            # We found the first ancestor
            return 0
          fi
        fi
      fi
    fi
    counter=$((counter + 1))
  done
  echo "No ancestor found";
  return 1
}

prepare-merge-base() {
  local prefix="$1"
  local data=$(log-tree "$2")
  local first_commit=

  for entry in $data; do
    local array=(${entry//:/ })
    local commit=${array[0]}
    local tree=${array[1]}
    local key="${prefix}_$tree"

    if [ -z "$first_commit" ]; then
      first_commit=$commit
    fi

    if [ -z ${!key+x} ]; then
      eval "$key=$commit";
    else
      eval "$key=${!key}_$commit";
    fi
    if $3; then
      # Store the commit order
      # This is used when we find the the first common ancestor
      merge_base_order+=("$tree");
    fi
  done

  branch_first_commit=$first_commit
}

log-tree() {
  git log --pretty=format:%H:%T "$1"
}

get-root() {
  git rev-parse --show-toplevel
}

get-branch() {
  git rev-parse --abbrev-ref HEAD
}

count-lines() {
  grep -c $'\n'
}

EOLCONVERTER=cat
[ "$OSTYPE" = "msys" ] && {
  EOLCONVERTER=dos2unix
}
converteol() {
  "$EOLCONVERTER"
}

die() {
  echo "$@" 1>&2
  exit 1
}

# Handles argument parsing and help message output for all commands
run() {
  local cmd="$1"
  shift

  # This is used for show_help
  CMD="$cmd"

  local cmdname="${cmd//-/_}"
  local getopt_spec="${cmdname}_help"

  local extra=
  [ "$cmd" = "main" ] &&
    extra="--stop-at-non-option"
  eval "$(
    echo "${!getopt_spec}" |
      git rev-parse --parseopt $extra -- "$@" ||
    echo exit $?
  )"

  while [ $# -gt 0 ]; do
    local arg="$1"
    shift
    [ "$arg" = "--" ] &&
      break
    local value="true"
    [[ "$1" != -* ]] && {
      value="$1"
      shift
    }
    declare "${cmdname}_flag${arg//-/_}=$value"
  done

  local min_args="${cmdname}_min_args"
  [ $# -lt "${!min_args:-0}" ] &&
    show_help "Not enough arguments"
  local max_args="${cmdname}_max_args"
  [ $# -gt "${!max_args:-1000}" ] && {
    local restindex=$(expr ${!max_args} + 1)
    show_help "Too many arguments: ${@:$restindex}"
  }

  "$cmd" "$@"
}

show_help() {
  echo "$@" 1>&2
  run "$CMD" --help
}

main() {
  [ "${main_flag_d:-}" ] &&
    set -x

  local cmd="$1"
  shift
  case "$cmd" in
    build|load|import|export|list|mergebase) run "$cmd" "$@" ;;
    help)
      [ $# -ne 1 ] && {
        [ $# -gt 1 ] &&
          echo "Unknown arguments: ${@:2}" 1>&2
        run main --help
        return
      }
      local cmd="$1"
      shift
      case "$cmd" in
        pull|push|import|export|list)
          run "$cmd" --help
          exit 0
          ;;
      *) die "Unknown command: '$cmd'"
      esac
      ;;
    *) show_help "Unknown command: $cmd" ;;
  esac
}

init_script
run main "$@"
